ARCH?=AURIX_TC3
TARGET?=aurix_tc3xx
SIGN?=ECC256
HASH?=SHA256
DEBUG?=0
NO_ASM?=1
WOLFBOOT_VERSION?=1
V?=0
SPMATH?=1
RAM_CODE?=1
EXT_FLASH?=1
EXT_BOOT=1
EXT_UPDATE=1
EXT_SWAP=1
FLAGS_INVERT=1
FLASH_MULTI_SECTOR_ERASE=1
DEBUG_UART=1
PRINTF_ENABLED=1

# ELF loading specific configuration
ELF=1
ELF_FLASH_SCATTER=1

ARCH_FLASH_OFFSET=0x800A0000
WOLFBOOT_SECTOR_SIZE=0x4000

# ELF memory partitioning (same PFLASH1 space as standard wolfBoot):
# Standard wolfBoot uses 0x80300000-0x80600000 (3MB) for BOOT+UPDATE+SWAP
# ELF mode splits this same space into EXEC+BOOT+UPDATE+SWAP:
# - Execution space: 0x80300000 (~1.5MB) - where app runs after scatter loading
# - BOOT partition:  0x8047C000 (~0.75MB) - where signed ELF file is stored
# - UPDATE partition: 0x8053C000 (~0.75MB) - where update ELF file is stored
# - SWAP sector:      0x805FC000 (16KB) - for atomic updates

# ELF storage partitions (where signed ELF files are stored)
WOLFBOOT_PARTITION_BOOT_ADDRESS=0x8047C000
WOLFBOOT_PARTITION_UPDATE_ADDRESS=0x8053C000
WOLFBOOT_PARTITION_SWAP_ADDRESS=0x805FC000
WOLFBOOT_PARTITION_SIZE=0xC0000

# ELF execution space (where test app runs after scatter loading)
# Uses the same space that would be the BOOT partition in standard mode
# This is only needed to configure the memory regions in the test app linker file
# (see test-app/tc3tc_app.ld). For custom user apps with a different memory layout
# and linker file this is not necessary.
WOLFBOOT_ELF_EXEC_ADDRESS=0x80300000
WOLFBOOT_ELF_EXEC_SIZE=0x17C000
