name: WolfBoot CMake Build (Windows)

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  windows-cmake:
    name: Build on Windows (CMake + Ninja)
    runs-on: windows-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        target:
          - stm32l4
          - stm32h7
        include:
          # Optional per-target cache variables you might want to pass later.
          # Keep empty for now to avoid guessing addresses.
          - target: stm32l4
            extra_cache: ""
          - target: stm32h7
            extra_cache: ""

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: true

      # ARM GCC toolchain (adds the bin dir to PATH)
      - name: Set up ARM none-eabi GCC 14.x
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          version: "14.2.Rel1" # <-- use 'release', not 'version'
          path-env-var: ARM_NONE_EABI_GCC_PATH

      # CMake + Ninja are preinstalled on windows-latest, but verify & print versions
      - name: Tool versions
        shell: bash
        run: |
          echo "Compiler versions:"
          arm-none-eabi-gcc --version
          echo
          echo "CMake:"
          cmake --version
          echo
          echo "Ninja:"
          ninja --version
          echo
          echo "MSVC (via vswhere):"
          cmd.exe /c "\"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe\" -latest -products * -requires Microsoft.Component.MSBuild -property installationVersion"

      - name: Build via cmd inline
        shell: cmd
        run: |
          if exist build-windows-stm32l4 rmdir /s /q build-windows-stm32l4
          cmake --preset windows-stm32l4
          cmake --build --preset windows-stm32l4 --parallel %NUMBER_OF_PROCESSORS%

      - name: Build via batch (cmd)
        shell: cmd
        run: |
          :: # Call my_test.bat

          call my_test.bat

      - name: Configure (CMake + Ninja)
        shell: bash
        run: |
          # cmake runs in git bash

          BUILD_DIR="build-${{ matrix.target }}"
          cmake -S . -B "$BUILD_DIR" -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain_arm-none-eabi.cmake \
            -DWOLFBOOT_CONFIG_MODE=preset                              \
            -DWOLFBOOT_TARGET=${{ matrix.target }}                     \
            -DBUILD_TEST_APPS=ON                                       \
            -DWOLFBOOT_PARTITION_BOOT_ADDRESS=0x8020000                \
            -DWOLFBOOT_SECTOR_SIZE=0x20000                             \
            -DWOLFBOOT_PARTITION_SIZE=0xD0000                          \
            -DWOLFBOOT_PARTITION_UPDATE_ADDRESS=0x80F0000              \
            -DWOLFBOOT_PARTITION_SWAP_ADDRESS=0x81C0000                \
            ${{ matrix.extra_cache }}
          echo "Configured: $BUILD_DIR"

      - name: Build
        shell: bash
        run: |
          # cmake runs in git bash
          BUILD_DIR="build-${{ matrix.target }}"
          cmake --build "$BUILD_DIR" --parallel

      # Optional: show interesting artifacts
      - name: List build outputs
        if: always()
        shell: bash
        run: |
          BUILD_DIR="build-${{ matrix.target }}"
          echo "=== Artifacts in $BUILD_DIR ==="
          find "$BUILD_DIR" -maxdepth 3 -type f \( -name "*.elf" -o -name "*.bin" -o -name "*.hex" -o -name "bin-assemble" -o -name "keystore" \) -print || true

      # Upload binaries if present (non-fatal if none)
      - name: Upload firmware/artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wolfboot-${{ matrix.target }}
          path: |
            build-${{ matrix.target }}/**/*.elf
            build-${{ matrix.target }}/**/*.bin
            build-${{ matrix.target }}/**/*.hex
          if-no-files-found: warn
